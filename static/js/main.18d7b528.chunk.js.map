{"version":3,"sources":["Components/Button.js","Components/Socialmedia.js","Components/Quote.js","Components/App.js","serviceWorker.js","index.js"],"names":["Button","props","className","id","onClick","fetchdata","SocialMedia","href","icon","faTwitter","faInstagram","Quote","quote","author","App","fetchData","fetch","method","dataType","headers","then","resp","json","data","quotesData","Math","floor","random","console","log","setState","catch","error","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAWeA,MATf,SAAgBC,GACZ,OACI,6BACI,4BAAQC,UAAU,eAAeC,GAAG,YAAYC,QAAS,kBAAMH,EAAMI,cAArE,e,cCQGC,MARf,WACE,OACK,yBAAKJ,UAAU,oCACV,uBAAGK,KAAK,cAAcJ,GAAG,cAAa,kBAAC,IAAD,CAAiBK,KAAMC,OAC7D,uBAAGF,KAAK,gBAAgBJ,GAAG,aAAaD,UAAU,QAAO,kBAAC,IAAD,CAAiBM,KAAME,SCkB7EC,MAvBf,SAAeV,GACX,OACI,yBAAKE,GAAG,YAAYD,UAAU,+BAC1B,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,+BACX,gCAAYC,GAAG,OAAOD,UAAU,aAC5B,2BACKD,EAAMW,QAGf,wBAAIT,GAAG,SAASD,UAAU,yBAA1B,KACOD,EAAMY,QAEb,kBAAC,EAAD,CAAQR,UAAWJ,EAAMI,aAE7B,kBAAC,EAAD,UC+BLS,G,kBA9Cb,aAAe,IAAD,8BACZ,+CAQFC,UAAY,WACVC,MAAM,yIAA0I,CAC9IC,OAAQ,MACRC,SAAU,OACVC,QAAS,CACP,eAAgB,+BAGjBC,MAAK,SAACC,GACL,OAAOA,EAAKC,UAEbF,MAAK,SAACG,GACL,IAAIC,EAAaD,EAAI,OAAWE,KAAKC,MAAsB,IAAhBD,KAAKE,WAEhDC,QAAQC,IAAIL,EAAU,QACtBI,QAAQC,IAAIL,EAAU,OACtB,EAAKM,SACH,CACElB,MAAOY,EAAU,MACjBX,OAAQW,EAAU,YAIvBO,OAAM,SAACC,GACNJ,QAAQC,IAAIG,EAAO,sBA/BvB,EAAKC,MAAQ,CACXrB,MAAO,kBACPC,OAAQ,OAJE,E,sEAsCZ,OACE,yBAAKX,UAAU,0BACb,kBAAC,EAAD,CAAOU,MAAOsB,KAAKD,MAAMrB,MAAOC,OAAQqB,KAAKD,MAAMpB,OAAQR,UAAW6B,KAAKnB,iB,GAzCjEoB,c,YCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.18d7b528.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Button(props) {\n    return (\n        <div>\n            <button className=\"btn btn-info\" id=\"new-quote\" onClick={() => props.fetchdata()}>\n                New Quote\n            </button>\n        </div>\n    );\n}\nexport default Button;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faInstagram } from '@fortawesome/free-brands-svg-icons'\n\nfunction SocialMedia() {\n  return (\n       <div className=\"card-footer text-center bg-light\">\n            <a href=\"twitter.com\" id=\"tweet-code\"><FontAwesomeIcon icon={faTwitter} /></a>\n            <a href=\"instagram.com\" id=\"tweet-code\" className=\"ml-4\"><FontAwesomeIcon icon={faInstagram} /></a>\n        </div>\n  );\n}\nexport default SocialMedia;","import React from 'react';\nimport Button from './Button';\nimport SocialMedia from './Socialmedia'\n\nfunction Quote(props) {\n    return (\n        <div id=\"quote-box\" className=\"row align-self-center w-100\">\n            <div className=\"col-6 offset-3 bg-dark\">\n                <div className=\"card bg-light\">\n                    <div className=\"card-body text-center h-100\">\n                        <blockquote id=\"text\" className=\"card-text\">\n                            <p>\n                                {props.quote}\n                            </p>\n                        </blockquote>\n                        <h5 id=\"author\" className=\"card-title text-right\">\n                            - {props.author}\n                        </h5>\n                        <Button fetchdata={props.fetchdata}/>\n                    </div>\n                    <SocialMedia />\n                </div>\n            </div>\n        </div>\n\n    );\n}\nexport default Quote;","import React, { Component } from 'react';\nimport Quote from './Quote';\nimport '../Styles/Styles.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      quote: \"Human===Selfish\",\n      author: 'Sab'\n    }\n  }\n\n  //Fetch Quotes \n  fetchData = () => {\n    fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\", {\n      method: \"GET\",\n      dataType: \"JSON\",\n      headers: {\n        \"Content-Type\": \"text/plain; charset=utf-8\",\n      }\n    })\n      .then((resp) => {\n        return resp.json()\n      })\n      .then((data) => {\n        let quotesData = data['quotes'][Math.floor(Math.random() * 102)];\n        //let randomNumber = Math.floor(Math.random()*102)\n        console.log(quotesData['author']);\n        console.log(quotesData['quote']);\n        this.setState(\n          {\n            quote: quotesData['quote'],\n            author: quotesData['author']\n          }\n        )\n      })\n      .catch((error) => {\n        console.log(error, \"catch the hoop\")\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"container d-flex h-100\">\n        <Quote quote={this.state.quote} author={this.state.author} fetchdata={this.fetchData} />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}